---
- name: Ensure that the directories exist
  file:
    path: '{{ item }}'
    state: directory
  loop:
  - '{{ ansible_env["HOME"] }}/bin'
  - '{{ mirror_directory }}'

- name: Drop oc-mirror into user's ~/bin
  copy:
    src: '{{ bin_recovery_dir }}/oc-mirror'
    dest: '{{ ansible_env["HOME"] }}/bin/'
    mode: '0755'

- name: Drop all oc-mirror data
  copy:
    src: '{{ mirror_data_recovery_dir }}/'
    dest: '{{ mirror_directory }}'

- name: Ensure pull secret location exists
  file:
    path: '{{ ansible_env["HOME"] }}/.docker'
    state: directory

- name: Drop pull secret for oc-mirror
  copy:
    content: '{{ local_registry_pull_secret|from_yaml|to_json }}'
    dest: '{{ ansible_env["HOME"] }}/.docker/config.json'

- name: Identify any disk-based mirror bundles
  find:
    paths: '{{ mirror_directory }}'
    file_type: file
    patterns: 'mirror*.tar'
  when: mirror_directly_to_registry|bool == false
  register: mirrored_content

- name: Publish mirror data into disconnected registry
  command: oc-mirror --from "{{ item.path }}" docker://{{ registry_hostname }}/{{ toplevel_namespace }}
  when: mirror_directly_to_registry|bool == false
  loop: '{{ mirrored_content.files }}'

- name: Check for oc and openshift-install
  stat:
    path: '{{ ansible_env["HOME"] }}/bin/{{ item }}'
  register: client_binary
  loop:
  - oc
  - openshift-install

- name: Recover the versions of OpenShift published
  shell: >-
    set -o pipefail &&
    podman search
    --limit 9999
    --authfile '{{ ansible_env["HOME"] }}/.docker/config.json'
    --list-tags
    {{ registry_hostname }}/{{ toplevel_namespace }}/openshift/release
    | tail -n+2
    | awk '{print $2}'
    | cut -d- -f1
    | sort -Vu
  args:
    executable: /bin/bash
  register: mirrored_versions
  changed_when: false

- name: Extract the clients from the latest mirror
  shell: |-
    function extract_binary {
      binary=${1:?binary name is required}
      image=${2:? image name is required}
      podman run --replace --rm --name extract -d --entrypoint bash {{ registry_hostname }}/{{ toplevel_namespace }}/openshift/release:{{ mirrored_versions.stdout_lines|last }}-x86_64-$image -c 'while : ; do sleep 30; done'
      podman cp "extract:/usr/bin/$binary" "{{ ansible_env["HOME"] }}/bin/$binary" || exit 1
      sync
      podman stop extract
    }
    extract_binary oc cli
    extract_binary openshift-install installer
  when: false in client_binary|json_query('results[*].stat.exists')

- name: Recover the installer to the controller
  fetch:
    src: '{{ ansible_env["HOME"] }}/bin/openshift-install'
    dest: '{{ bin_recovery_dir }}/'
    flat: yes
    mode: '0755'

- name: Identify the latest results
  find:
    paths: '{{ ansible_env["HOME"] }}/oc-mirror-workspace'
    file_type: directory
    patterns: 'results-*'
  register: oc_mirror_results

- name: Identify the CatalogSources and ICSPs from the latest results
  find:
    paths: '{{ (oc_mirror_results.files|last).path }}'
    file_type: file
    patterns: '*.yaml'
  register: oc_mirror_manifests
  when: oc_mirror_results.files|length > 0

- name: Copy oc_mirror manifests into place
  copy:
    remote_src: true
    src: '{{ item.path }}'
    dest: '{{ mirror_directory }}/'
  loop: '{{ oc_mirror_manifests.files }}'
  when:
  - oc_mirror_results.files|length > 0
  - oc_mirror_manifests.files|length > 0
