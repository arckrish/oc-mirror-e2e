---
- name: Pull latest openshift-install release info for version
  uri:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-{{ openshift_version }}/release.txt
    return_content: yes
  register: release_text

- name: Identify minor release version
  set_fact:
    openshift_version_minor: |-
      {{ (release_text.content|regex_search('\nName:\s*4\S*', multiline=true)).split()|last }}

- name: Grab the signing key
  get_url:
    url: https://www.redhat.com/security/fd431d51.txt
    dest: '{{ ansible_env["HOME"] }}/rh_key.txt'

- name: Make the client download directory
  file:
    path: '{{ client_directory }}'
    state: directory

- name: Grab the latest release checksums
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-{{ openshift_version }}/sha256sum.txt
    dest: '{{ client_directory }}/{{ openshift_version_minor }}-sha256sum.txt'

- name: Grab the latest helm checksums
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/helm/latest/sha256sum.txt
    dest: '{{ client_directory }}/helm-sha256sum.txt'

- name: Grab the signature file
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-{{ openshift_version }}/sha256sum.txt.gpg
    dest: '{{ client_directory }}/{{ openshift_version_minor }}-sha256sum.txt.sig'

- name: Import RH key, verify signature
  shell: |
    trust_key() {
        echo -e '5\ny\n' | gpg --command-fd 0 --edit-key security@redhat.com trust
        gpg --update-trustdb
        echo changed
    }
    cd '{{ client_directory }}'
    gpg --list-keys |& grep -qF security@redhat.com || gpg --import ~/rh_key.txt
    gpg --list-keys |& grep -q 'ultimate.*security@redhat\.com' || trust_key
    gpg --verify {{ openshift_version_minor }}-sha256sum.txt.sig |& grep -qF 'Good signature from "Red Hat' || exit 1
  register: import_key
  changed_when: '"changed" in import_key.stdout_lines'

- name: Read installer, client, and helm checksum file data
  slurp:
    src: '{{ client_directory }}/{{ item }}'
  register: checksums
  loop:
  - '{{ openshift_version_minor }}-sha256sum.txt'
  - helm-sha256sum.txt

- name: Read expected sha256 for installer, client, and helm
  set_fact:
    openshift_install_sum: >-
      {{ (checksums.results[0].content | b64decode |
        regex_search('\n?(\S*)\s*openshift-install-linux-' +
          openshift_version_minor|regex_escape() +
          '\.tar\.gz', multiline=true
        )).split() | first
      }}
    openshift_client_sum: >-
      {{ (checksums.results[0].content | b64decode |
        regex_search('\n?(\S*)\s*openshift-client-linux-' +
          openshift_version_minor|regex_escape() +
          '\.tar\.gz', multiline=true
        )).split() | first
      }}
    helm_sum: >-
      {{ (checksums.results[1].content | b64decode |
        regex_search('\n?(\S*)\s*helm-linux-amd64\.tar\.gz', multiline=true
        )).split() | first
      }}

- name: Download latest release
  get_url:
    url: '{{ deconstructed_url }}'
    checksum: sha256:{{ item.sum }}
    dest: '{{ client_directory }}/openshift-{{ item.bin }}.tar.gz'
  vars:
    deconstructed_url: |-
      https://mirror.openshift.com/pub/openshift-v4/clients/{{ item.type }}/
      {%- if item.type == "ocp" -%}
      stable-{{ openshift_version}}
      {%- else -%}
      latest
      {%- endif -%}
      /
      {%- if item.type == "ocp" -%}
      openshift-{{ item.bin }}-linux-{{ openshift_version_minor}}
      {%- else -%}
      {{ item.bin }}-linux-amd64
      {%- endif -%}
      .tar.gz
  register: downloads
  loop:
    - bin: install
      sum: '{{ openshift_install_sum }}'
      type: ocp
    - bin: client
      sum: '{{ openshift_client_sum }}'
      type: ocp
    - bin: helm
      sum: '{{ helm_sum }}'
      type: helm

- name: Remove untarred installers when an update was downloaded
  file:
    path: '{{ client_directory }}/{{ item }}'
    state: absent
  loop:
    - oc
    - openshift-install
    - helm
  when: downloads|json_query("length(results[?changed]) > `0`")

- name: Untar the archives
  unarchive:
    remote_src: yes
    src: '{{ client_directory }}/openshift-{{ item.type }}.tar.gz'
    dest: '{{ client_directory }}/'
    extra_opts:
    - --no-same-owner
    creates: '{{ client_directory }}/{{ item.creates }}'
  loop:
    - type: install
      creates: openshift-install
    - type: client
      creates: oc
    - type: helm
      creates: helm

- name: Install git
  become: true
  package:
    name: git
    state: installed

- name: Download oc-mirror
  git:
    repo: '{{ oc_mirror_source.repo }}'
    dest: '{{ oc_mirror_clone_location }}'
    version: '{{ oc_mirror_source.version }}'
    force: yes
  register: repo_download

- name: Check for existing binary
  stat:
    path: '{{ oc_mirror_binary_location }}'
  register: oc_mirror

- name: Compile oc-mirror
  shell: hack/build.sh --clean
  args:
    chdir: '{{ oc_mirror_clone_location }}'
  when: >-
    repo_download.after != repo_download.before or
    (not oc_mirror.stat.exists)

- name: Mirror content directly into registry
  include_tasks: mirror-directly-to-registry.yml
  when: mirror_directly_to_registry|bool == true

- name: Download mirror content on connected host
  include_tasks: mirror-on-host.yml
  when: mirror_directly_to_registry|bool == false

- name: Prepare recovery directory
  file:
    path: '{{ bin_recovery_dir }}'
    state: directory
  delegate_to: controller

- name: Recover clients
  fetch:
    src: '{{ client_directory }}/{{ item }}'
    dest: '{{ bin_recovery_dir }}/'
    flat: yes
    mode: '0755'
  loop:
  - openshift-install
  - oc
  - helm

- name: Recover oc-mirror
  fetch:
    src: '{{ oc_mirror_binary_location }}'
    dest: '{{ bin_recovery_dir }}/'
    flat: yes
    mode: '0755'
